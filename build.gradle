plugins {
    id 'scala'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
    id 'maven-publish'
}

group = 'org.opencypher'
version = '1.0-SNAPSHOT'

repositories {
    jcenter()
}

ext.excludedDependencyGroups = [
    'org.scala-lang',
    'org.scala-lang.modules',
]


dependencies {
    implementation group: 'org.typelevel', name: "cats-core_2.12", version: '1.6.0'

    implementation group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '1.7.3'
    // implementation group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '1.7.3'

    implementation 'org.scala-lang:scala-library:2.12.8'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.scalatest:scalatest_2.12:3.0.5'

    testRuntimeOnly 'org.scala-lang.modules:scala-xml_2.12:1.1.1'
}

publishing {
    publications {
        shade(MavenPublication) { pub ->
            project.shadow.component(pub)
            pom.withXml {
                def dependenciesNode = asNode().dependencies[0]
                project.configurations.implementation.allDependencies.findAll {
                    excludedDependencyGroups.contains(it.group)
                }.each { dep ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', 'compile')
                }
            }
        }
    }
}

shadowJar {
    classifier = ''
    from generatePomFileForShadePublication {
        rename('pom-default.xml',"META-INF/maven/${project.group}/${project.name}/pom.xml")
    }
    def relocatePackage = 'relocated'
    [
            'cats',
            'org.neo4j.driver',
    ].each { pkg ->
        relocate(pkg, "${relocatePackage}.$pkg")
    }

    dependencies {
        excludedDependencyGroups.each {
            exclude(dependency("$it:"))
        }
    }
    exclude "META-INF/versions/**/*"
    exclude "META-INF/services/**/*"
    exclude "META-INF/NOTICE*"
    exclude "META-INF/LICENSE*"
    exclude "utf8.json"
}
